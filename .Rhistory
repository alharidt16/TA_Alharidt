jarak_hamming <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,"Y",P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
# Fungsi untuk menghitung jarak Hamming
hamming_dist_to_center <- function(observation, center) {
dist <- sum(observation != center)
return(dist)
}
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,"Y",P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result_jarak_hamming_awal
result_jarak_hamming_awal
result_jarak_hamming_modes<-jarak_hamming(DATA_TA_HASIL_MODES,"cluster_kmodes",P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result_jarak_hamming_modes
result_jarak_hamming_modes
##
# Fungsi untuk menghitung jarak Manhattan
manhattan_dist_to_center <- function(observation, center) {
dist <- abs(observation - center)
dist <- sum(dist)
return(dist)
}
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
#Menentukan jarak amatan ke pusat klaster
str(DATA_TA)
DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmodes")]
DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmedoids")]
DATA_TA_HASIL_MODES=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmodes")]
DATA_TA_HASIL_MEDOIDS=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmedoids")]
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,"Y",P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
result_jarak_hamming_awal
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result_jarak_hamming_awal
result_jarak_hamming_modes<-jarak_hamming(DATA_TA_HASIL_MODES,"cluster_kmodes",P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
result_jarak_hamming_modes
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result_jarak_hamming_modes
##
# Fungsi untuk menghitung jarak Manhattan
manhattan_dist_to_center <- function(observation, center) {
dist <- abs(observation - center)
dist <- sum(dist)
return(dist)
}
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_manhattan_awal<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"Y",P_K1_A2,P_K2_A2,P_K3_A2,P_K4_A2,P_K5_A2)
DATA_TA_HASIL_MEDOIDS$jarak_pusat_awal <- result_jarak_manhattan_awal
result_jarak_manhattan_medoids<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"cluster_kmedoids",P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
DATA_TA_HASIL_MEDOIDS$jarak_pusat_medoids <- result_jarak_manhattan_medoids
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[ ,"jarak_pusat_modes"] >= DATA_TA_HASIL_MODES[ ,"jarak_pusat_awal"], DATA_TA_HASIL_MODES[ ,"Y"], DATA_TA_HASIL_MODES[ ,"cluster_kmodes"])
MEDOIDS_AKHIR <-ifelse(DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_medoids"] >= DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_awal"], DATA_TA_HASIL_MEDOIDS[, "Y"], DATA_TA_HASIL_MEDOIDS[, "cluster_kmedoids"])
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- MODES_AKHIR
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
MEDOIDS_AKHIR
MODES_AKHIR
str(DATA_TA_HASIL_MODES)
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MODES$KLASTER_AKHIR)
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
str(DATA_TA_HASIL_MODES)
str(DATA_TA_HASIL_MEDOIDS)
#eksplor ke excel
write_xlsx(DATA_TA_HASIL_MODES, path="DATA_TA_HASIL_MODES.xlsx")
write_xlsx(DATA_TA_HASIL_MEDOIDS, path="DATA_TA_HASIL_MEDOIDS.xlsx")
#confusion matrix
table(DATA_TA_HASIL_MODES$cluster_kmodes,DATA_TA_HASIL_MODES$KLASTER_AKHIR)
table(DATA_TA_HASIL_MEDOIDS$cluster_kmedoids,DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
evaluasi = function(predik,asli){
akurasi=confusionMatrix(data=predik, reference = asli)$overall[1]#akurasi
presisi=confusionMatrix(data=predik, reference = asli)$byClass[1]#presisi
recal=confusionMatrix(data=predik, reference = asli)$byClass[2]#recal
F1_score = 2 * (presisi * recal) / (presisi+ recal) #F1
cat("Akurasi :", akurasi,"\n")
cat("Presisi :", presisi,"\n")
cat("Recal :", recal,"\n")
cat("F1 Score :", F1_score,"\n")
}
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
evaluasi(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[ ,"jarak_pusat_modes"] <= DATA_TA_HASIL_MODES[ ,"jarak_pusat_awal"], DATA_TA_HASIL_MODES[ ,"cluster_kmodes"], DATA_TA_HASIL_MODES[ ,"Y"])
MEDOIDS_AKHIR <-ifelse(DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_medoids"] <= DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_awal"], DATA_TA_HASIL_MEDOIDS[, "cluster_kmedoids"], DATA_TA_HASIL_MEDOIDS[, "Y"])
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- MODES_AKHIR
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MODES$KLASTER_AKHIR)
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
str(DATA_TA_HASIL_MODES)
str(DATA_TA_HASIL_MEDOIDS)
#confusion matrix
table(DATA_TA_HASIL_MODES$cluster_kmodes,DATA_TA_HASIL_MODES$KLASTER_AKHIR)
table(DATA_TA_HASIL_MEDOIDS$cluster_kmedoids,DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
evaluasi = function(predik,asli){
akurasi=confusionMatrix(data=predik, reference = asli)$overall[1]#akurasi
presisi=confusionMatrix(data=predik, reference = asli)$byClass[1]#presisi
recal=confusionMatrix(data=predik, reference = asli)$byClass[2]#recal
F1_score = 2 * (presisi * recal) / (presisi+ recal) #F1
cat("Akurasi :", akurasi,"\n")
cat("Presisi :", presisi,"\n")
cat("Recal :", recal,"\n")
cat("F1 Score :", F1_score,"\n")
}
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
evaluasi(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
#eksplor ke excel
write_xlsx(DATA_TA_HASIL_MODES, path="DATA_TA_HASIL_MODES.xlsx")
write_xlsx(DATA_TA_HASIL_MEDOIDS, path="DATA_TA_HASIL_MEDOIDS.xlsx")
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$Y)
evaluasi(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$Y)
DATA_TA
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
DATA_TA
desc(DATA_TA)
desc(DATA_TA$cluster_kmodes)
str(DATA_TA_ASLI)
summary(DATA_TA)
DATA_TA_ASLI
str(DATA_TA_ASLI)
DATA_TAA=DATA_TA_ASLI[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
#Menambahkan kolom label hasil kmodes
DATA_TAA$cluster_kmodes<-k_modes$cluster
DATA_TAA$cluster_kmedoids<-k_medoids$clustering
DATA_TAA
summary(DATA_TAA)
#Menjadikan faktor
DATA_TAA$Y <- as.factor(DATA_TAA$Y)
DATA_TAA$cluster_kmodes <- as.factor(DATA_TAA$cluster_kmodes)
DATA_TAA$cluster_kmedoids <- as.factor(DATA_TAA$cluster_kmedoids)
summary(DATA_TAA)
summary(DATA_TAA$cluster_kmodes)
hist(DATA_TAA$cluster_kmodes)
hist(DATA_TAA$X1)
ggplot(DATA_TA, aes(x = claster_kmodes)) +
geom_bar()
ggplot(DATA_TAA, aes(x = claster_kmodes)) +
geom_bar()
ggplot(DATA_TAA, aes(x = cluster_kmodes)) +
geom_bar()
ggplot(DATA_TA, aes(x = cluster_kmodes)) +
geom_bar()
ggplot(DATA_TA, aes(x = cluster_kmedoids)) +
geom_bar()
ggplot(DATA_TA, aes(x = cluster_kmedoids)) +
geom_bar()
ggplot(DATA_TA, aes(x = cluster_kmodes)) +
geom_bar()
ggplot(DATA_TA, aes(x = cluster_kmodes)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
ggplot(DATA_TA, aes(x = cluster_kmodes,fill = cluster_kmodes)) +
geom_col() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
ggplot(DATA_TA, aes(x = cluster_kmodes)) +
geom_col() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
ggplot(DATA_TA, aes(x = cluster_kmodes)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
summary(DATA_TAA$cluster_kmodes)
summary(DATA_TAA$cluster_kmodes)
summary(DATA_TAA$cluster_kedoids)
summary(DATA_TAA$cluster_kmedoids)
ggplot(DATA_TAA, aes(x = cluster_kmedoids)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
ggplot(DATA_TA, aes(x = cluster_kmedoids)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
ggplot(DATA_TAA, aes(x = cluster_kmedoids)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
ggplot(DATA_TA, aes(x = cluster_kmedoids)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
ggplot(DATA_TAA, aes(x = cluster_kmedoids)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
ggplot(DATA_TA, aes(x = cluster_kmedoids)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
summary(DATA_TAA$cluster_kmedoids)
str(OUTLIER_KMODES)
str(OUTLIER_KMEDOIDS)
write.csv(OUTLIER_KMODES,"DATA_labelbeda_kmodes.csv", row.names = TRUE)
OUTLIER_KMODES
DATA_TA_ASLI
str(DATA_TA_ASLI)
write.csv(DATA_TA_ASLI,"DATATA.csv")
#Load Data
DATA_TA_ASLI <- read.csv("DATATA.csv")
DATA_TA_ASLI
str(DATA_TA_ASLI)
#Menghilangkan Data duplikat
DATA_TA_ASLI<- unique(DATA_TA_ASLI)
#Memilih Variabel yang akan digunakan
DATA_TA=DATA_TA_ASLI[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
DATA_TA
###
DATA_TAA=DATA_TA_ASLI[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
DATA_TAA
summary(DATA_TAA$cluster_kmedoids)
hist(DATA_TAA$X1)
ggplot(DATA_TA, aes(x = cluster_kmedoids)) +
geom_bar() +
labs(title = "jumlah data per klaster", x = "Kategori", y = "Nilai") +
theme_minimal()
#KMODES
#Data Tanpa Variabel Y untuk kmodes
DATA_TA_1=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_1
#clustering menggunakan Kmodes
set.seed(123)
#k_modes=kmodes(DATA_TA_1, 5, iter.max = 100, weighted = FALSE, fast = TRUE)
k_modes$cluster#Melihat label dari hasil cluster kmodes
k_modes$modes #Pusat klaster
pusat_kmodes=k_modes$modes
#Menambahkan kolom label hasil kmodes
DATA_TA$cluster_kmodes<-k_modes$cluster
DATA_TA
#KMEDOIDS
#Data Tanpa Variabel Y untuk kmedoids
DATA_TA_2=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_2
set.seed(123)
#k_medoids=pam(DATA_TA_2, 5, metric = "manhattan", stand = FALSE)
k_medoids$clustering
k_medoids$medoids
pusat_kmedoids=k_medoids$medoids
pusat_kmedoids
DATA_TA$cluster_kmedoids<-k_medoids$clustering
DATA_TA
str(DATA_TA)
#eksplor ke excel
write_xlsx(DATA_TA, path="DATA_klaster.xlsx")
#Menentukan Pusat Klaster Awal
DATA_TA_A=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
DATA_TA_A_5=filter(DATA_TA_A, Y==5)
DATA_TA_A_5=DATA_TA_A_5[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_4=filter(DATA_TA_A, Y==4)
DATA_TA_A_4=DATA_TA_A_4[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_3=filter(DATA_TA_A, Y==3)
DATA_TA_A_3=DATA_TA_A_3[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_2=filter(DATA_TA_A, Y==2)
DATA_TA_A_2=DATA_TA_A_2[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_1=filter(DATA_TA_A, Y==1)
DATA_TA_A_1=DATA_TA_A_1[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
#fungsi untuk mencari modus
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
#Menentukan Pusat Klaster Awal dengan Modus
P_K1_A1=apply(DATA_TA_A_1, 2, find_mode) #pusat klaster 1 kategori awal untuk modus
P_K2_A1=apply(DATA_TA_A_2, 2, find_mode)
P_K3_A1=apply(DATA_TA_A_3, 2, find_mode)
P_K4_A1=apply(DATA_TA_A_4, 2, find_mode)
P_K5_A1=apply(DATA_TA_A_5, 2, find_mode)
#Menentukan Pusat Klaster Awal dengan Median
P_K1_A2=apply(DATA_TA_A_1, 2, median) #pusat klaster 1 kategori awal untuk median
P_K2_A2=apply(DATA_TA_A_2, 2, median)
P_K3_A2=apply(DATA_TA_A_3, 2, median)
P_K4_A2=apply(DATA_TA_A_4, 2, median)
P_K5_A2=apply(DATA_TA_A_5, 2, median)
# pelabelan klaster Kmodes
# M=Y, 4=1, 3=2, 5=3, 1=4, 2=5
#pusat klaster kmodes
P_K1_M1=pusat_kmodes[4,]
P_K2_M1=pusat_kmodes[3,]
P_K3_M1=pusat_kmodes[5,]
P_K4_M1=pusat_kmodes[1,]
P_K5_M1=pusat_kmodes[2,]
#pusat klaster kmedoids
P_K1_M2=pusat_kmedoids[5,]
P_K2_M2=pusat_kmedoids[4,]
P_K3_M2=pusat_kmedoids[3,]
P_K4_M2=pusat_kmedoids[2,]
P_K5_M2=pusat_kmedoids[1,]
# mengubah nilai kolom Y, cluster_kmodes dan cluster_kmedoids
# Data Y
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"1" = "Sangat Miskin",
"2" = "Miskin",
"3" = "Hampir Miskin",
"4" = "Cukup Miskin",
"5" = "Tidak Miskin"))
# Data Kmodes
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"4" = "Sangat Miskin",
"3" = "Miskin",
"5" = "Hampir Miskin",
"1" = "Cukup Miskin",
"2" = "Tidak Miskin"))
# Data Kmedoids
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"5" = "Sangat Miskin",
"4" = "Miskin",
"3" = "Hampir Miskin",
"2" = "Cukup Miskin",
"1" = "Tidak Miskin"))
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
#eksplor ke excel
write_xlsx(DATA_TA, path="DATA_label.xlsx")
#Menjadikan faktor
DATA_TA$Y <- as.factor(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.factor(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.factor(DATA_TA$cluster_kmedoids)
str(DATA_TA)
#Data Kmodes yang klasternya berbeda
DATA_TA_KMODES=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmodes")]
OUTLIER_KMODES=DATA_TA_KMODES[DATA_TA_KMODES$Y != DATA_TA_KMODES$cluster_kmodes,]
str(OUTLIER_KMODES)
write.csv(OUTLIER_KMODES,"DATA_labelbeda_kmodes.csv", row.names = TRUE)
OUTLIER_KMODES
#Data Kmedoids yang klasternya berbeda
DATA_TA_KMEDOIDS=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmedoids")]
OUTLIER_KMEDOIDS=DATA_TA_KMEDOIDS[DATA_TA_KMEDOIDS$Y != DATA_TA_KMEDOIDS$cluster_kmedoids,]
str(OUTLIER_KMEDOIDS)
write.csv(OUTLIER_KMEDOIDS,"DATA_labelbeda_kmedoids.csv", row.names = TRUE)
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
evaluasi(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
#confusion matrix
table(DATA_TA_HASIL_MODES$cluster_kmodes,DATA_TA_HASIL_MODES$KLASTER_AKHIR)
#confusion matrix
table(DATA_TA_HASIL_MODES$cluster_kmodes,DATA_TA_HASIL_MODES$KLASTER_AKHIR)
table(DATA_TA_HASIL_MEDOIDS$cluster_kmedoids,DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
evaluasi(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
#Data tanpa outlier
KMEDOIDS_CLEAN=DATA_TA_HASIL_MEDOID[DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR == DATA_TA_HASIL_MEDOIDS$cluster_kmedoid]
#Data tanpa outlier
KMEDOIDS_CLEAN=DATA_TA_HASIL_MEDOIDS[DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR == DATA_TA_HASIL_MEDOIDS$cluster_kmedoid]
#Data tanpa outlier
KMEDOIDS_CLEAN=DATA_TA_HASIL_MEDOIDS[DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR == DATA_TA_HASIL_MEDOIDS$cluster_kmedoid,]
KMEDOIDS_CLEAN
str(KMEDOIDS_CLEAN)
KMEDOIDS_CLEAN=KMEDOIDS_CLEAN[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","KLASTER_AKHIR")]
str(KMEDOIDS_CLEAN)
KMEDOIDS_CLEAN=KMEDOIDS_CLEAN[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","KLASTER_AKHIR")]
str(KMEDOIDS_CLEAN)
# DESICION TREE
#membagi data training dan testing
set.seed(123)
splitdata <- sample.split(KMEDOIDS_CLEAN$KLASTER_AKHIR, SplitRatio = 0.7) # training 70%
data.training <- subset(DATA_TA, splitdata==T)
data.testing <- subset(DATA_TA, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
#membuat model desicion tree
DETE=rpart(KLASTER_AKHIR~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
data.training
data.training <- subset(KMEDOIDS_CLEAN, splitdata==T)
data.testing <- subset(KMEDOIDS_CLEAN, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
data.training
#membuat model desicion tree
DETE=rpart(KLASTER_AKHIR~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DETE)
#visualisasi
prp(DETE)
#Prdiksi
prediksi_DETE <- predict(DETE, newdata = data.testing, type = "class")
#confusion matrix
table(prediksi_DETE,data.testing$KLASTER_AKHIR)
#Melakukan evaluasi
prediksi=confusionMatrix(data=prediksi_DETE, reference = data.testing$KLASTER_AKHIR)$overall[1]#akurasi
presisi=confusionMatrix(data=prediksi_DETE, reference = data.testing$KLASTER_AKHIR)$byClass[1]#presisi
recal=confusionMatrix(data=prediksi_DETE, reference = data.testing$KLASTER_AKHIR)$byClass[2]#recal
F1=2 * (presisi* recal) / (presisi+ recal) #F1
prediksi
presisi
recal
F1
#visualisasi
prp(DETE)
#melihat dimensi data
dim(data.training)
dim(data.testing)
printcp(DETE)
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
# Fungsi untuk menghitung jarak Hamming
hamming_dist_to_center <- function(observation, center) {
dist <- sum(observation != center)
return(dist)
}
jarak_hamming <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result1_jarak_hamming_awal<-jarak_hamming(OUTLIER_KMODES,"Y",P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
