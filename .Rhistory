DATA_TA$Y <- as.factor(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.factor(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.factor(DATA_TA$cluster_kmedoids)
str(DATA_TA)
#Menjadikan faktor
DATA_TA$Y <- as.numeric(DATA_TA$Y)
str(DATA_TA)
DATA_TA$cluster_kmodes <- as.numeric(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.numeric(DATA_TA$cluster_kmedoids)
str(DATA_TA)
DATA_TA_HASIL_MODES=DATA_TA
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result_jarak_hamming_awal
DATA_TA_HASIL_MODES=DATA_TA
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result_jarak_hamming_awal
result_jarak_hamming_modes<-jarak_hamming(DATA_TA_HASIL_MODES,P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
#Membagi data yang beda
#Kmodes
str(OUTLIER_KMODES)
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result_jarak_hamming_modes
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[ ,"jarak_pusat_modes"] >= DATA_TA_HASIL_MODES[ ,"jarak_pusat_awal"], DATA_TA_HASIL_MODES[ ,"Y"], DATA_TA_HASIL_MODES[ ,"cluster_kmodes"])
DATA_TA_HASIL_MODES=DATA_TA
str(DATA_TA_HASIL_MODES)
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result_jarak_hamming_awal
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result_jarak_hamming_modes
MEDOIDS_AKHIR
DATA_TA_HASIL_MEDOIDS
str(DATA_TA)
result_jarak_hamming_awal
result_jarak_hamming_modes
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
jarak_hamming <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,Y,P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
jarak_hamming <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, "klaster"]==1){pusat=pusat1
} else if(data[i, "klaster"]==2){pusat=pusat2
} else if(data[i, "klaster"]==3){pusat=pusat3
} else if(data[i, "klaster"]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,Y,P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
jarak_hamming <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,"Y",P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
result_jarak_hamming_awal
result_jarak_hamming_modes<-jarak_hamming(DATA_TA_HASIL_MODES,"cluster_kmodes",P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
result_jarak_hamming_modes
##
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
DATA_TA_HASIL_MODES=DATA_TA
str(DATA_TA_HASIL_MODES)
#Membagi data yang beda
#Kmodes
str(OUTLIER_KMODES)
DATA_TA <- read_excel("DATA_label.xlsx")
str(DATA_TA)
# Ubah data menjadi dataframe
DATA_TA <- as.data.frame(DATA_TA)
#Menjadikan faktor
DATA_TA$Y <- as.numeric(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.numeric(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.numeric(DATA_TA$cluster_kmedoids)
DATA_TA <- read_excel("DATA_label.xlsx")
str(DATA_TA)
# Ubah data menjadi dataframe
DATA_TA <- as.data.frame(DATA_TA)
str(DATA_TA)
#Menjadikan faktor
DATA_TA$Y <- as.factor(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.factor(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.factor(DATA_TA$cluster_kmedoids)
str(DATA_TA)
DATA_TA_HASIL_MODES=DATA_TA
DATA_TA_HASIL_MEDOIDS=DATA_TA
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result_jarak_hamming_awal
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result_jarak_hamming_modes
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[ ,"jarak_pusat_modes"] >= DATA_TA_HASIL_MODES[ ,"jarak_pusat_awal"], DATA_TA_HASIL_MODES[ ,"Y"], DATA_TA_HASIL_MODES[ ,"cluster_kmodes"])
MODES_AKHIR
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- MODES_AKHIR
str(DATA_TA_HASIL_MODES)
#eksplor ke excel
write_xlsx(DATA_TA_HASIL_MODES, path="DATA_TA_HASIL_MODES.xlsx")
##
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,P_K1_A2,P_K2_A2,P_K3_A2,P_K4_A2,P_K5_A2)
DATA_TA_HASIL_MEDOIDS=DATA_TA
str(DATA_TA)
result<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"Y",P_K1_A2,P_K2_A2,P_K3_A2,P_K4_A2,P_K5_A2)
DATA_TA_HASIL_MEDOIDS$jarak_pusat_awal <- result
result<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"cluster_Kmedoids",P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
DATA_TA_HASIL_MEDOIDS
result<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"cluster_kmedoids",P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
DATA_TA_HASIL_MEDOIDS$jarak_pusat_medoids <- result
DATA_TA_HASIL_MEDOIDS
MEDOIDS_AKHIR <-ifelse(DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_medoids"] >= DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_awal"], DATA_TA_HASIL_MEDOIDS[, "Y"], DATA_TA_HASIL_MEDOIDS[, "cluster_kmedoids"])
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
MEDOIDS_AKHIR
DATA_TA_HASIL_MEDOIDS
write_xlsx(DATA_TA_HASIL_MEDOIDS, path="DATA_TA_HASIL_MEDOIDS.xlsx")
#confusion matrix
table(DATA_TA_HASIL_MODES$cluster_kmodes,DATA_TA_HASIL_MODES$KLASTER_AKHIR)
table(DATA_TA_HASIL_MEDOIDS$cluster_kmedoids,DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
#Load Data
DATA_TA_ASLI <- read.csv("Dataclean.csv")
DATA_TA_ASLI
str(DATA_TA_ASLI)
#Menghilangkan Data duplikat
DATA_TA_ASLI<- unique(DATA_TA_ASLI)
#Memilih Variabel yang akan digunakan
DATA_TA=DATA_TA_ASLI[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
DATA_TA
#KMODES
#Data Tanpa Variabel Y untuk kmodes
DATA_TA_1=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_1
#clustering menggunakan Kmodes
set.seed(123)
k_modes=kmodes(DATA_TA_1, 5, iter.max = 100, weighted = FALSE, fast = TRUE)
k_modes$cluster#Melihat label dari hasil cluster kmodes
k_modes$modes #Pusat klaster
pusat_kmodes=k_modes$modes
#Menambahkan kolom label hasil kmodes
DATA_TA$cluster_kmodes<-k_modes$cluster
View(DATA_TA)
#KMEDOIDS
#Data Tanpa Variabel Y untuk kmedoids
DATA_TA_2=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_2
DATA_TA$cluster_kmedoids<-k_medoids$clustering
DATA_TA
#Menentukan Pusat Klaster Awal
DATA_TA_A=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
DATA_TA_A_5=filter(DATA_TA_A, Y==5)
DATA_TA_A_5=DATA_TA_A_5[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_4=filter(DATA_TA_A, Y==4)
DATA_TA_A_4=DATA_TA_A_4[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_3=filter(DATA_TA_A, Y==3)
DATA_TA_A_3=DATA_TA_A_3[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_2=filter(DATA_TA_A, Y==2)
DATA_TA_A_2=DATA_TA_A_2[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_1=filter(DATA_TA_A, Y==1)
DATA_TA_A_1=DATA_TA_A_1[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
#fungsi untuk mencari modus
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
#Menentukan Pusat Klaster Awal dengan Modus
P_K1_A1=apply(DATA_TA_A_1, 2, find_mode) #pusat klaster 1 kategori awal untuk modus
P_K2_A1=apply(DATA_TA_A_2, 2, find_mode)
P_K3_A1=apply(DATA_TA_A_3, 2, find_mode)
P_K4_A1=apply(DATA_TA_A_4, 2, find_mode)
P_K5_A1=apply(DATA_TA_A_5, 2, find_mode)
#Menentukan Pusat Klaster Awal dengan Median
P_K1_A2=apply(DATA_TA_A_1, 2, median) #pusat klaster 1 kategori awal untuk median
P_K2_A2=apply(DATA_TA_A_2, 2, median)
P_K3_A2=apply(DATA_TA_A_3, 2, median)
P_K4_A2=apply(DATA_TA_A_4, 2, median)
P_K5_A2=apply(DATA_TA_A_5, 2, median)
#eksplor ke excel
write_xlsx(DATA_TA, path="DATA_label.xlsx")
k_modes$modes #Pusat klaster
P_K1_M1=pusat_kmodes[4,]
P_K2_M1=pusat_kmodes[5,]
P_K3_M1=pusat_kmodes[2,]
P_K4_M1=pusat_kmodes[1,]
P_K5_M1=pusat_kmodes[3,]
# mengubah nilai kolom Y, cluster_kmodes dan cluster_kmedoids
# Data Y
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"1" = "Sangat Miskin",
"2" = "Miskin",
"3" = "Hampir Miskin",
"4" = "Cukup Miskin",
"5" = "Tidak Miskin"))
# Data Kmodes
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"1" = "Sangat Miskin",
"5" = "Miskin",
"4" = "Hampir Miskin",
"2" = "Cukup Miskin",
"3" = "Tidak Miskin"))
#Menambahkan kolom label hasil kmodes
DATA_TA$cluster_kmodes<-k_modes$cluster
DATA_TA
# Data Kmodes
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"4" = "Sangat Miskin",
"5" = "Miskin",
"2" = "Hampir Miskin",
"1" = "Cukup Miskin",
"3" = "Tidak Miskin"))
# Data Kmedoids
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"5" = "Sangat Miskin",
"4" = "Miskin",
"3" = "Hampir Miskin",
"2" = "Cukup Miskin",
"1" = "Tidak Miskin"))
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
#Menjadikan faktor
DATA_TA$Y <- as.factor(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.factor(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.factor(DATA_TA$cluster_kmedoids)
#Data Kmodes yang klasternya berbeda
DATA_TA_KMODES=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmodes")]
OUTLIER_KMODES=DATA_TA_KMODES[DATA_TA_KMODES$Y != DATA_TA_KMODES$cluster_kmodes,]
str(OUTLIER_KMODES)
DATA_TA
#Menambahkan kolom label hasil kmodes
DATA_TA$cluster_kmodes<-k_modes$cluster
View(DATA_TA)
DATA_TA$cluster_kmedoids<-k_medoids$clustering
DATA_TA
#pusat klaster kmodes
P_K1_M1=pusat_kmodes[4,]
P_K2_M1=pusat_kmodes[3,]
P_K3_M1=pusat_kmodes[5,]
P_K4_M1=pusat_kmodes[1,]
P_K5_M1=pusat_kmodes[2,]
# mengubah nilai kolom Y, cluster_kmodes dan cluster_kmedoids
# Data Y
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"1" = "Sangat Miskin",
"2" = "Miskin",
"3" = "Hampir Miskin",
"4" = "Cukup Miskin",
"5" = "Tidak Miskin"))
# Data Kmodes
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"4" = "Sangat Miskin",
"3" = "Miskin",
"5" = "Hampir Miskin",
"1" = "Cukup Miskin",
"2" = "Tidak Miskin"))
# Data Kmedoids
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"5" = "Sangat Miskin",
"4" = "Miskin",
"3" = "Hampir Miskin",
"2" = "Cukup Miskin",
"1" = "Tidak Miskin"))
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
#eksplor ke excel
write_xlsx(DATA_TA, path="DATA_label.xlsx")
#eksplor ke excel
write_xlsx(DATA_TA, path="DATA_label.xlsx")
#Menjadikan faktor
DATA_TA$Y <- as.factor(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.factor(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.factor(DATA_TA$cluster_kmedoids)
DATA_TA
#Data Kmodes yang klasternya berbeda
DATA_TA_KMODES=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmodes")]
OUTLIER_KMODES=DATA_TA_KMODES[DATA_TA_KMODES$Y != DATA_TA_KMODES$cluster_kmodes,]
str(OUTLIER_KMODES)
write.csv(OUTLIER_KMODES,"DATA_labelbeda_kmodes.csv", row.names = TRUE)
#Data Kmedoids yang klasternya berbeda
DATA_TA_KMEDOIDS=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmedoids")]
OUTLIER_KMEDOIDS=DATA_TA_KMEDOIDS[DATA_TA_KMEDOIDS$Y != DATA_TA_KMEDOIDS$cluster_kmedoids,]
str(OUTLIER_KMEDOIDS)
write.csv(OUTLIER_KMEDOIDS,"DATA_labelbeda_kmedoids.csv", row.names = TRUE)
#DATA SRT Sangat Miskin
DATA_TA_SM=filter(DATA_TA, Y=="Sangat Miskin")
DATA_TA_M=filter(DATA_TA, Y=="Miskin")
DATA_TA_HM=filter(DATA_TA, Y=="Hampir Miskin")
DATA_TA_CM=filter(DATA_TA, Y=="Cukup Miskin")
DATA_TA_TM=filter(DATA_TA, Y=="Tidak Miskin")
table(DATA_TA$cluster_kmodes,DATA_TA$Y)
#Evaluasi perbedaan kelas Y dan hasil klaster
#Melakukan evaluasi
#Y dan kmodes
akurasi_bedakmodes=confusionMatrix(data=DATA_TA$cluster_kmodes, reference = DATA_TA$Y)$overall[1]#akurasi
presisi_bedakmodes=confusionMatrix(data=DATA_TA$cluster_kmodes, reference = DATA_TA$Y)$byClass[1]#presisi
recal_bedakmodes=confusionMatrix(data=DATA_TA$cluster_kmodes, reference = DATA_TA$Y)$byClass[2]#recal
F1_bedakmodes = 2 * (presisi_bedakmodes * recal_bedakmodes) / (presisi_bedakmodes+ recal_bedakmodes) #F1
akurasi_bedakmodes
presisi_bedakmodes
recal_bedakmodes
F1_bedakmodes
#kmodes dan kmedoids
akurasi_beda3=confusionMatrix(data=DATA_TA$cluster_kmedoids, reference = DATA_TA$cluster_kmodes)$overall[1]#akurasi
presisi_beda3=confusionMatrix(data=DATA_TA$cluster_kmedoids, reference = DATA_TA$cluster_kmodes)$byClass[1]#presisi
recal_beda3=confusionMatrix(data=DATA_TA$cluster_kmedoids, reference = DATA_TA$cluster_kmodes)$byClass[2]#recal
F1_beda3 = 2 * (presisi_beda3 * recal_beda3) / (presisi_beda3+ recal_beda3) #F1
akurasi_beda3
presisi_beda3
recal_beda3
F1_beda3
# DESICION TREE
#membagi data training dan testing
set.seed(123)
splitdata <- sample.split(DATA_TA$Y, SplitRatio = 0.7) # training 70%
data.training <- subset(DATA_TA, splitdata==T)
data.testing <- subset(DATA_TA, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
#membuat model desicion tree
#variabel Y
DT_Y=rpart(Y~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_Y)
#variabel kmodes
DT_kmodes=rpart(cluster_kmodes~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_kmodes)
#variabel kmedoids
DT_kmedoids=rpart(cluster_kmedoids~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_kmedoids)
#visualisasi
prp(DT_Y)
prp(DT_kmodes)
prp(DT_kmedoids)
#Prdiksi
prediksi_Y <- predict(DT_Y, newdata = data.testing, type = "class")
prediksi_kmodes <- predict(DT_kmodes, newdata = data.testing, type = "class")
prediksi_kmedoids <- predict(DT_kmedoids, newdata = data.testing, type = "class")
#confusion matrix
table(prediksi_Y,data.testing$Y)
table(prediksi_kmodes,data.testing$cluster_kmodes)
table(prediksi_kmedoids,data.testing$cluster_kmedoids)
#Melakukan evaluasi
#Y
akurasi_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$overall[1]#akurasi
presisi_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$byClass[1]#presisi
recal_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$byClass[2]#recal
F1_Y = 2 * (presisi_Y * recal_Y) / (presisi_Y+ recal_Y) #F1
akurasi_Y
presisi_Y
recal_Y
F1_Y
#Kmodes
akurasi_kmodes=confusionMatrix(data=prediksi_kmodes, reference = data.testing$cluster_kmodes)$overall[1]#akurasi
presisi_kmodes=confusionMatrix(data=prediksi_kmodes, reference = data.testing$cluster_kmodes)$byClass[1]#presisi
recal_kmodes=confusionMatrix(data=prediksi_kmodes, reference = data.testing$cluster_kmodes)$byClass[2]#recal
F1_kmodes = 2 * (presisi_kmodes * recal_kmodes) / (presisi_kmodes+ recal_kmodes) #F1
akurasi_kmodes
presisi_kmodes
recal_kmodes
F1_kmodes
#Kmedoids
akurasi_kmedoids=confusionMatrix(data=prediksi_kmedoids, reference = data.testing$cluster_kmedoids)$overall[1]#akurasi
presisi_kmedoids=confusionMatrix(data=prediksi_kmedoids, reference = data.testing$cluster_kmedoids)$byClass[1]#presisi
recal_kmedoids=confusionMatrix(data=prediksi_kmedoids, reference = data.testing$cluster_kmedoids)$byClass[2]#recal
F1_kmedoids = 2 * (presisi_kmedoids * recal_kmedoids) / (presisi_kmedoids+ recal_kmedoids) #F1
akurasi_kmedoids
presisi_kmedoids
recal_kmedoids
F1_kmedoids
DT_Y$variable.importance
DT_kmodes$variable.importance
DT_kmedoids$variable.importance
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
#Load Data
DATA_TA_HASIL_MODES
#confusion matrix
table(DATA_TA_HASIL_MODES$cluster_kmodes,DATA_TA_HASIL_MODES$KLASTER_AKHIR)
table(DATA_TA_HASIL_MEDOIDS$cluster_kmedoids,DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
evaluasi = function(predik,asli){
akurasi=confusionMatrix(data=predik, reference = asli)$overall[1]#akurasi
presisi=confusionMatrix(data=predik, reference = asli)$byClass[1]#presisi
recal=confusionMatrix(data=predik, reference = asli)$byClass[2]#recal
F1_score = 2 * (presisi * recal) / (presisi+ recal) #F1
cat("Akurasi :", akurasi,"\n")
cat("Presisi :", presisi,"\n")
cat("Recal :", recal,"\n")
cat("F1 Score :", F1_score,"\n")
}
evaluasi(DATA_TA_HASIL_MODES$cluster_kmodes,DATA_TA_HASIL_MODES$KLASTER_AKHIR)
evaluasi(DATA_TA_HASIL_MEDOIDS$cluster_kmedoids,DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
str(DATA_TA_HASIL_MODES)
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MODES$KLASTER_AKHIR)
str(DATA_TA_HASIL_MODES)
min(DATA_TA_HASIL_MODES$KLASTER_AKHIR)
min(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
max(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
max(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
evaluasi(DATA_TA_HASIL_MODES$cluster_kmodes,DATA_TA_HASIL_MODES$KLASTER_AKHIR)
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
evaluasi(DATA_TA_HASIL_MEDOIDS$cluster_kmedoids,DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
evaluasi(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
