#Menghilangkan Data duplikat
DATA_TA<- unique(DATA_TA)
#Memilih Variabel yang akan digunakan
DATA_TA=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
DATA_TA
#Menambahkan kolom label hasil kmodes
DATA_TA$cluster_kmodes<-k_modes$cluster
DATA_TA$cluster_kmedoids<-k_medoids$clustering
DATA_TA
# mengubah nilai kolom Y cluster_kmodes dan cluster_kmedoids
# Data Y
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"1" = "Sangat Miskin",
"2" = "Miskin",
"3" = "Hampir Miskin",
"4" = "Cukup Miskin",
"5" = "Tidak Miskin"))
# Data Kmodes
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"1" = "Sangat Miskin",
"5" = "Miskin",
"4" = "Hampir Miskin",
"2" = "Cukup Miskin",
"3" = "Tidak Miskin"))
DATA_TA
# Data Kmedoids
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"5" = "Sangat Miskin",
"4" = "Miskin",
"3" = "Hampir Miskin",
"2" = "Cukup Miskin",
"1" = "Tidak Miskin"))
DATA_TA
#Data Kmodes yang klasternya berbeda
DATA_TA_KMODES=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmodes")]
OUTLIER_KMODES=DATA_TA_KMODES[DATA_TA_KMODES$Y != DATA_TA_KMODES$cluster_kmodes,]
OUTLIER_KMODES
#Data Kmedoids yang klasternya berbeda
DATA_TA_KMEDOIDS=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmedoids")]
OUTLIER_KMEDOIDS=DATA_TA_KMEDOIDS[DATA_TA_KMEDOIDS$Y != DATA_TA_KMEDOIDS$cluster_kmedoids,]
OUTLIER_KMEDOIDS
#Load library
library(readxl)
library(factoextra)
library(cluster)
library(klaR)
library(writexl)
library(dplyr)
OUTLIER_KMODES
str(OUTLIER_KMODES)
str(OUTLIER_KMEDOIDS)
OUTLIER_KMODES
OUTLIER_KMEDOIDS
OUTLIER_KMEDOIDS
DATA_TA
#DATA SRT Sangat Miskin
DATA_TA_SM=filter(DATA_TA, Y=="Sangat Miskin")
DATA_TA_SM
DATA_TA_M=filter(DATA_TA, Y=="Miskin")
DATA_TA_HM=filter(DATA_TA, Y=="Hampir Miskin")
DATA_TA_CM=filter(DATA_TA, Y=="Cukup Miskin")
DATA_TA_TM=filter(DATA_TA, Y=="Tidak Miskin")
DATA_TA_TM
DATA_TA_SM[DATA_TA_SMS$Y != DATA_TA_SM$cluster_kmodes,]
DATA_TA_SM[DATA_TA_SM$Y != DATA_TA_SM$cluster_kmodes,]
CM_kmodes
DATA_TA
#merubah kembali menjadi angka
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
#Load library
library(readxl)
library(factoextra)
library(cluster)
library(klaR)
library(writexl)
library(dplyr)
library(caret)
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
#Menjadikan faktor
DATA_TA$Y <- as.factor(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.factor(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.factor(DATA_TA$cluster_kmedoids)
#Data Kmodes yang klasternya berbeda
DATA_TA_KMODES=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmodes")]
OUTLIER_KMODES=DATA_TA_KMODES[DATA_TA_KMODES$Y != DATA_TA_KMODES$cluster_kmodes,]
OUTLIER_KMODES
#Data Kmedoids yang klasternya berbeda
DATA_TA_KMEDOIDS=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmedoids")]
OUTLIER_KMEDOIDS=DATA_TA_KMEDOIDS[DATA_TA_KMEDOIDS$Y != DATA_TA_KMEDOIDS$cluster_kmedoids,]
OUTLIER_KMEDOIDS
#CONFUSION MATRIX
# Membuat confusion matrix dengan fungsi confusionMatrix
CM_kmodes <- confusionMatrix(data = DATA_TA$cluster_kmodes, reference = DATA_TA$Y)
CM_kmedoids <- confusionMatrix(data = DATA_TA$cluster_kmedoids, reference = DATA_TA$Y)
CM_kmodes
CM_kmedoids
# Memuat paket yang dibutuhkan, misalnya 'party' atau 'rpart'
library (party)
# Membuat model decision tree dengan fungsi ctree
# formula adalah rumus yang mendeskripsikan variabel prediktor dan respon
# data adalah nama kumpulan data yang digunakan
model_DT_kmodes <- ctree (cluster_kmodes~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, DATA_TA)
model_DT_kmedoids <- ctree (cluster_kmedoids~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, DATA_TA)
model_DT_kmodes
# Memuat paket yang dibutuhkan, misalnya 'RWeka' atau 'partykit'
library (RWeka)
# Membuat model decision tree dengan fungsi J48
# formula adalah rumus yang mendeskripsikan variabel prediktor dan respon
# data adalah nama kumpulan data yang digunakan
# control adalah parameter tambahan untuk mengatur algoritma C4.5
model <- J48 (cluster_kmedoids~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, DATA_TA, control = Weka_control ())
# Melakukan visualisasi decision tree dengan fungsi plot
model
#Load library
library(readxl)
library(factoextra)
library(cluster)
library(klaR)
library(writexl)
library(dplyr)
library(caret)
plot(model)
# Memuat paket yang dibutuhkan, misalnya 'RWeka' atau 'partykit'
library (RWeka)
plot(model)
# Memuat paket yang dibutuhkan, misalnya 'party' atau 'rpart'
library (party)
plot(model)
# Memuat paket yang dibutuhkan, misalnya 'party' atau 'rpart'
library (partykit)
install.packages("partykit")
# Memuat paket yang dibutuhkan, misalnya 'party' atau 'rpart'
library (partykit)
plot(model)
# Melakukan visualisasi decision tree dengan fungsi plot
model
# Membuat model decision tree dengan fungsi J48
# formula adalah rumus yang mendeskripsikan variabel prediktor dan respon
# data adalah nama kumpulan data yang digunakan
# control adalah parameter tambahan untuk mengatur algoritma C4.5
model <- J48 (cluster_kmedoids~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, DATA_TA, control = Weka_control ())
# Melakukan visualisasi decision tree dengan fungsi plot
model
plot(model)
rm(model_DT_kmedoids)
rm(model_DT_kmodes)
CM_kmodes
# Load the necessary libraries
library(rpart)
library(rpart.plot)
library(readxl)
library(factoextra)
library(cluster)
library(klaR)
library(writexl)
library(dplyr)
library(caret)
library (party)
k_medoids$medoids
table(DATA_TA$cluster_kmodes,DATA_TA$Y)
#Load Data
DATA_TA <- read.csv("Dataclean.csv")
DATA_TA
#Menghilangkan Data duplikat
DATA_TA<- unique(DATA_TA)
#Memilih Variabel yang akan digunakan
DATA_TA=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
DATA_TA
#Menambahkan kolom label hasil kmodes
DATA_TA$cluster_kmodes<-k_modes$cluster
DATA_TA$cluster_kmedoids<-k_medoids$clustering
#Menentukan Pusat Klaster Awal dengan Modus
DATA_TA_A=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y")]
DATA_TA_A
DATA_TA_A_5=filter(DATA_TA_A, Y==5)
DATA_TA_A_5=DATA_TA_A_5[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_4=filter(DATA_TA_A, Y==4)
DATA_TA_A_4=DATA_TA_A_4[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_3=filter(DATA_TA_A, Y==3)
DATA_TA_A_3=DATA_TA_A_3[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_2=filter(DATA_TA_A, Y==2)
DATA_TA_A_2=DATA_TA_A_2[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
DATA_TA_A_1=filter(DATA_TA_A, Y==1)
DATA_TA_A_1=DATA_TA_A_1[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
#fungsi untuk mencari modus
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
#Menentukan Pusat Klaster Awal dengan Modus
P_K1_A1=apply(DATA_TA_A_1, 2, find_mode) #pusat klaster 1 kategori awal untuk modus
P_K2_A1=apply(DATA_TA_A_2, 2, find_mode)
P_K3_A1=apply(DATA_TA_A_3, 2, find_mode)
P_K4_A1=apply(DATA_TA_A_4, 2, find_mode)
P_K5_A1=apply(DATA_TA_A_5, 2, find_mode)
#Menentukan Pusat Klaster Awal dengan Median
P_K1_A2=apply(DATA_TA_A_1, 2, median) #pusat klaster 1 kategori awal untuk median
P_K2_A2=apply(DATA_TA_A_2, 2, median)
P_K3_A2=apply(DATA_TA_A_3, 2, median)
P_K4_A2=apply(DATA_TA_A_4, 2, median)
P_K5_A2=apply(DATA_TA_A_5, 2, median)
# pelabelan klaster Kmodes
# M=Y, 1=1, 5=2, 4=3, 2=4, 3=5
#pusat klaster kmodes
P_K1_M1=pusat_kmodes[1,]
P_K2_M1=pusat_kmodes[5,]
P_K3_M1=pusat_kmodes[4,]
P_K4_M1=pusat_kmodes[2,]
P_K5_M1=pusat_kmodes[3,]
# pelabelan klaster Kmedoids
# M=Y, 5=1, 4=2, 3=3, 2=4, 1=5
#pusat klaster kmodes
P_K1_M2=pusat_kmedoids[5,]
P_K2_M2=pusat_kmedoids[4,]
P_K3_M2=pusat_kmedoids[3,]
P_K4_M2=pusat_kmedoids[2,]
P_K5_M2=pusat_kmedoids[1,]
# mengubah nilai kolom Y, cluster_kmodes dan cluster_kmedoids
# Data Y
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"1" = "Sangat Miskin",
"2" = "Miskin",
"3" = "Hampir Miskin",
"4" = "Cukup Miskin",
"5" = "Tidak Miskin"))
# Data Kmodes
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"1" = "Sangat Miskin",
"5" = "Miskin",
"4" = "Hampir Miskin",
"2" = "Cukup Miskin",
"3" = "Tidak Miskin"))
# Data Kmedoids
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"5" = "Sangat Miskin",
"4" = "Miskin",
"3" = "Hampir Miskin",
"2" = "Cukup Miskin",
"1" = "Tidak Miskin"))
table(DATA_TA$cluster_kmodes,DATA_TA$Y)
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
#Menjadikan faktor
DATA_TA$Y <- as.factor(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.factor(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.factor(DATA_TA$cluster_kmedoids)
#Data Kmodes yang klasternya berbeda
DATA_TA_KMODES=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmodes")]
OUTLIER_KMODES=DATA_TA_KMODES[DATA_TA_KMODES$Y != DATA_TA_KMODES$cluster_kmodes,]
OUTLIER_KMODES
#Data Kmedoids yang klasternya berbeda
DATA_TA_KMEDOIDS=DATA_TA[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26","Y","cluster_kmedoids")]
OUTLIER_KMEDOIDS=DATA_TA_KMEDOIDS[DATA_TA_KMEDOIDS$Y != DATA_TA_KMEDOIDS$cluster_kmedoids,]
OUTLIER_KMEDOIDS
table(DATA_TA$cluster_kmodes,DATA_TA$Y)
#CONFUSION MATRIX
# Membuat confusion matrix dengan fungsi confusionMatrix
CM_kmodes <- confusionMatrix(data = DATA_TA$cluster_kmodes, reference = DATA_TA$Y)
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
# DESICION TREE
#membagi data training dan testing
set.seed(101)
splitdata <- sample.split(DATA_TA$Y, SplitRatio = 0.7) # training 70%
data.training <- subset(DATA_TA, splitdata==T)
data.testing <- subset(DATA_TA, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
DATA_TA
#membuat model desicion tree
#variabel Y
DT_Y=rpart(Y~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_Y)
#variabel kmodes
DT_kmodes=rpart(cluster_kmodes~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_kmodes)
#variabel kmedoids
DT_kmedoids=rpart(cluster_kmedoids~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_kmedoids)
#visualisasi
plot(DT_Y, uniform = TRUE, main="Klasifikasi Y")
text(DT_Y, use.n = TRUE, all=TRUE)
library(rpart.plot)
library(rpart.plot) #visualisai
prp(DT_Y)
prp(DT_kmodes)
prp(DT_kmedoids)
#Prdiksi
prediksi_Y <- predict(DT_Y, newdata = data.testing, type = "class")
prediksi_kmodes <- predict(DT_kmodes, newdata = data.testing, type = "class")
prediksi_kmedoids <- predict(DT_kmedoids, newdata = data.testing, type = "class")
#konfusion matrix
table(prediksi_Y,data.testing$Y)
table(prediksi_kmodes,data.testing$cluster_kmodes)
table(prediksi_kmedoids,data.testing$cluster_kmedoids)
#Melakukan evaluasi
confusionMatrix(data=prediksi_Y, reference = data.testing$Y)
confusionMatrix(data=prediksi_kmodes, reference = data.testing$cluster_kmodes)
confusionMatrix(data=prediksi_kmedoids, reference = data.testing$cluster_kmedoids)
DT_Y$variable.importance
DT_kmodes$variable.importance
DT_kmedoids$variable.importance
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
k_modes$modes #Pusat klaster
DT_kmodes$variable.importance
DATA_TA
#eksplor ke excel
write_xlsx(DATA_TA, path="DATA_label.xlsx")
OUTLIER_KMODES
#eksplor ke excel
write_xlsx(OUTLIER_KMODES, path="DATA_labelbeda_kmodes.xlsx")
write_xlsx(OUTLIER_KMODES, path="DATA_labelbeda_kmodes.xlsx", row.names=TRUE)
write_xlsx(OUTLIER_KMODES, path="DATA_labelbeda_kmodes.xlsx", row.names(T))
write.csv(OUTLIER_KMODES,"DATA_labelbeda_kmodes.xlsx", row.names = TRUE)
write.csv(OUTLIER_KMODES,"DATA_labelbeda_kmodes.csv", row.names = TRUE)
DATA_TA
write.csv(OUTLIER_KMEDOIDS,"DATA_labelbeda_kmedoids.csv", row.names = TRUE)
#CONFUSION MATRIX
# Membuat confusion matrix dengan fungsi confusionMatrix
CM_kmodes <- confusionMatrix(data = DATA_TA$cluster_kmodes, reference = DATA_TA$Y)
CM_kmedoids <- confusionMatrix(data = DATA_TA$cluster_kmedoids, reference = DATA_TA$Y)
CM_kmodes
CM_kmedoids
table(DATA_TA$cluster_kmodes,DATA_TA$Y)
#confusion matrix
table(prediksi_Y,data.testing$Y)
table(prediksi_kmodes,data.testing$cluster_kmodes)
table(prediksi_kmedoids,data.testing$cluster_kmedoids)
#Melakukan evaluasi
confusionMatrix(data=prediksi_Y, reference = data.testing$Y)
confusionMatrix(data=prediksi_kmodes, reference = data.testing$cluster_kmodes)
confusionMatrix(data=prediksi_kmedoids, reference = data.testing$cluster_kmedoids)
#Melakukan evaluasi
confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$overall#akurasi
#Melakukan evaluasi
confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$overall[1]#akurasi
confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$byClass[1]#presisi
confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$byClass[2]#recal
#Melakukan evaluasi
akurasi_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$overall[1]#akurasi
presisi_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$byClass[1]#presisi
recal_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$byClass[2]#recal
F1_Y = 2 * (presisi_Y * recal_Y) / (presisi_Y+ recal_Y) #F1
F1_Y
#Melakukan evaluasi
#Y
akurasi_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$overall[1]#akurasi
presisi_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$byClass[1]#presisi
recal_Y=confusionMatrix(data=prediksi_Y, reference = data.testing$Y)$byClass[2]#recal
F1_Y = 2 * (presisi_Y * recal_Y) / (presisi_Y+ recal_Y) #F1
akurasi_Y
presisi_Y
recal_Y
F1_Y
#Kmodes
akurasi_kmodes=confusionMatrix(data=prediksi_kmodes, reference = data.testing$cluster_kmodes)$overall[1]#akurasi
presisi_kmodes=confusionMatrix(data=prediksi_kmodes, reference = data.testing$cluster_kmodes)$byClass[1]#presisi
recal_kmodes=confusionMatrix(data=prediksi_kmodes, reference = data.testing$cluster_kmodes)$byClass[2]#recal
F1_kmodes = 2 * (presisi_kmodes * recal_kmodes) / (presisi_kmodes+ recal_kmodes) #F1
akurasi_kmodes
presisi_kmodes
recal_kmodes
F1_kmodes
#Kmedoids
akurasi_kmedoids=confusionMatrix(data=prediksi_kmedoids, reference = data.testing$cluster_kmedoids)$overall[1]#akurasi
presisi_kmedoids=confusionMatrix(data=prediksi_kmedoids, reference = data.testing$cluster_kmedoids)$byClass[1]#presisi
recal_kmedoids=confusionMatrix(data=prediksi_kmedoids, reference = data.testing$cluster_kmedoids)$byClass[2]#recal
F1_kmedoids = 2 * (presisi_kmedoids * recal_kmedoids) / (presisi_kmedoids+ recal_kmedoids) #F1
akurasi_kmedoids
presisi_kmedoids
recal_kmedoids
F1_kmedoids
# Print the results
cat("Accuracy:", round(akurasi_kmodes, 3), "\n")
CM_kmodes
#Evaluasi perbedaan kelas Y dan hasil klaster
#Melakukan evaluasi
#Y dan kmodes
akurasi_bedakmodes=confusionMatrix(data=DATA_TA$cluster_kmodes, reference = DATA_TA$Y)$overall[1]#akurasi
presisi_bedakmodes=confusionMatrix(data=DATA_TA$cluster_kmodes, reference = DATA_TA$Y)$byClass[1]#presisi
recal_bedakmodes=confusionMatrix(data=DATA_TA$cluster_kmodes, reference = DATA_TA$Y)$byClass[2]#recal
F1_bedakmodes = 2 * (presisi_bedakmodes * recal_bedakmodes) / (presisi_bedakmodes+ recal_bedakmodes) #F1
akurasi_bedakmodes
presisi_bedakmodes
recal_bedakmodes
F1_bedakmodes
#Y dan kmedoids
akurasi_bedakmedoids=confusionMatrix(data=DATA_TA$cluster_kmedoids, reference = DATA_TA$Y)$overall[1]#akurasi
presisi_bedakmedoids=confusionMatrix(data=DATA_TA$cluster_kmedoids, reference = DATA_TA$Y)$byClass[1]#presisi
recal_bedakmedoids=confusionMatrix(data=DATA_TA$cluster_kmedoids, reference = DATA_TA$Y)$byClass[2]#recal
F1_bedakmedoids = 2 * (presisi_bedakmedoids * recal_bedakmedoids) / (presisi_bedakmedoids+ recal_bedakmedoids) #F1
akurasi_bedakmedoids
presisi_bedakmedoids
recal_bedakmedoids
F1_bedakmedoids
akurasi_bedakmodes
presisi_bedakmodes
recal_bedakmodes
F1_bedakmodes
akurasi_bedakmedoids
presisi_bedakmedoids
recal_bedakmedoids
F1_bedakmedoids
akurasi_bedakmedoids
presisi_bedakmedoids
recal_bedakmedoids
F1_bedakmedoids
akurasi_Y
presisi_Y
recal_Y
F1_Y
akurasi_kmodes
presisi_kmodes
recal_kmodes
F1_kmodes
akurasi_kmedoids
presisi_kmedoids
recal_kmedoids
F1_kmedoids
