}
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
#Menentukan jarak amatan ke pusat klaster
str(DATA_TA)
DATA_TA_HASIL_MODES=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y","cluster_kmodes")]
DATA_TA_HASIL_MEDOIDS=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y","cluster_kmedoids")]
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
# Fungsi untuk menghitung jarak Hamming
hamming_dist_to_center <- function(observation, center) {
dist <- sum(observation != center)
return(dist)
}
jarak_hamming <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,"Y",P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
result_jarak_hamming_awal
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result_jarak_hamming_awal
#result_jarak_hamming_modes<-jarak_hamming(DATA_TA_HASIL_MODES,"cluster_kmodes",P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
result_jarak_hamming_modes
result_jarak_hamming_modes<-jarak_hamming(DATA_TA_HASIL_MODES,"cluster_kmodes",P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
result_jarak_hamming_modes
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result_jarak_hamming_modes
##
# Fungsi untuk menghitung jarak Manhattan
manhattan_dist_to_center <- function(observation, center) {
dist <- abs(observation - center)
dist <- sum(dist)
return(dist)
}
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_manhattan_awal<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"Y",P_K1_A2,P_K2_A2,P_K3_A2,P_K4_A2,P_K5_A2)
result_jarak_manhattan_awal
DATA_TA_HASIL_MEDOIDS$jarak_pusat_awal <- result_jarak_manhattan_awal
result_jarak_manhattan_medoids<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"cluster_kmedoids",P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
result_jarak_manhattan_medoids
DATA_TA_HASIL_MEDOIDS$jarak_pusat_medoids <- result_jarak_manhattan_medoids
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
# DESICION TREE
#membagi data training dan testing
set.seed(123)
splitdata <- sample.split(DATA_TA$Y, SplitRatio = 0.7) # training 70%
data.training <- subset(DATA_TA, splitdata==T)
data.testing <- subset(DATA_TA, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
DATA_TA
DETE
printcp(DETE)
View(DT_kmedoids)
str(KMEDOIDS_CLEAN)
MODES_AKHIR
DATA_TA_HASIL_MODES
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[ ,"jarak_pusat_modes"] <= DATA_TA_HASIL_MODES[ ,"jarak_pusat_awal"], DATA_TA_HASIL_MODES[ ,"cluster_kmodes"], DATA_TA_HASIL_MODES[ ,"Y"])
MODES_AKHIR
MEDOIDS_AKHIR <-ifelse(DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_medoids"] <= DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_awal"], DATA_TA_HASIL_MEDOIDS[, "cluster_kmedoids"], DATA_TA_HASIL_MEDOIDS[, "Y"])
MEDOIDS_AKHIR
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- MODES_AKHIR
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MODES$KLASTER_AKHIR)
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
str(DATA_TA_HASIL_MODES)
str(DATA_TA_HASIL_MEDOIDS)
#eksplor ke excel
write_xlsx(DATA_TA_HASIL_MODES, path="DATA_TA_HASIL_MODES.xlsx")
write_xlsx(DATA_TA_HASIL_MEDOIDS, path="DATA_TA_HASIL_MEDOIDS.xlsx")
#confusion matrix
table(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
table(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
evaluasi = function(predik,asli){
akurasi=confusionMatrix(data=predik, reference = asli)$overall[1]#akurasi
cat("Akurasi :", akurasi,"\n")
}
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
evaluasi(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
#Data tanpa outlier
KMEDOIDS_CLEAN=DATA_TA_HASIL_MEDOIDS[DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR == DATA_TA_HASIL_MEDOIDS$cluster_kmedoid,]
KMEDOIDS_CLEAN=KMEDOIDS_CLEAN[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","KLASTER_AKHIR")]
str(KMEDOIDS_CLEAN)
# DESICION TREE
#membagi data training dan testing
set.seed(123)
splitdata <- sample.split(KMEDOIDS_CLEAN$KLASTER_AKHIR, SplitRatio = 0.7) # training 70%
data.training <- subset(KMEDOIDS_CLEAN, splitdata==T)
data.testing <- subset(KMEDOIDS_CLEAN, splitdata==F)
#membuat model desicion tree
DETE=rpart(KLASTER_AKHIR~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
# DESICION TREE
#membagi data training dan testing
set.seed(123)
splitdata <- sample.split(KMEDOIDS_CLEAN$KLASTER_AKHIR, SplitRatio = 0.7) # training 70%
data.training <- subset(KMEDOIDS_CLEAN, splitdata==T)
data.testing <- subset(KMEDOIDS_CLEAN, splitdata==F)
#membuat model desicion tree
DETE=rpart(KLASTER_AKHIR~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11, method = "class", data = data.training)
DETE
prediksi_DETE <- predict(DETE, newdata = data.testing, type = "class")
prediksi_DETE
#confusion matrix
confusion_matrix=table(data.testing$KLASTER_AKHIR,prediksi_DETE)
confusion_matrix
# Inisialisasi vektor untuk presisi, recall, dan F1-score
precision <- numeric(nrow(confusion_matrix))
recall <- numeric(nrow(confusion_matrix))
f1_score <- numeric(nrow(confusion_matrix))
# Hitung presisi, recall, dan F1-score untuk setiap kelas
for (i in 1:nrow(confusion_matrix)) {
TP <- confusion_matrix[i, i]
FP <- sum(confusion_matrix[, i]) - TP
FN <- sum(confusion_matrix[i, ]) - TP
TN <- sum(confusion_matrix) - (TP + FP + FN)
precision[i] <- TP / (TP + FP)
recall[i] <- TP / (TP + FN)
f1_score[i] <- 2 * precision[i] * recall[i] / (precision[i] + recall[i])
}
# Tampilkan hasil
results <- data.frame(
Class = 1:nrow(confusion_matrix),
Precision = precision,
Recall = recall,
F1_Score = f1_score
)
print(results)
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
prp(DETE)
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
#Load Data
DATA_TA_ASLI <- read_excel("DATA_AL HARIDT MAHMUDI_2008108010004.xlsx")
DATA_TA_ASLI
str(DATA_TA_ASLI)
DATA_TA
str(DATA_TA)
DATA_TA_ASLI <- as.data.frame(DATA_TA_ASLI)
str(DATA_TA_ASLI)
#Data Tanpa Variabel Y untuk kmodes
DATA_TA_1=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
DATA_TA_1
str(DATA_TA_1)
#clustering menggunakan Kmodes
set.seed(123)
k_modes=kmodes(DATA_TA_1, 5, iter.max = 100, weighted = FALSE, fast = TRUE)
k_modes$cluster#Melihat label dari hasil cluster kmodes
k_modes$modes #Pusat klaster
pusat_kmodes=k_modes$modes
#Data untuk hasil clustering
DATA_TA <- DATA_TA_ASLI
DATA_TA
# Menambahkan kolom label hasil kmodes
DATA_TA$cluster_kmodes<-k_modes$cluster
DATA_TA
#KMEDOIDS
#Data Tanpa Variabel Y untuk kmedoids
DATA_TA_2=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
str(DATA_TA_2)
#CLUSTERING KMEDOIDS
set.seed(123)
k_medoids$clustering
k_medoids$medoids
pusat_kmedoids=k_medoids$medoids
pusat_kmedoids <- setNames(pusat_kmedoids, c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y"))
pusat_kmedoids
k_medoids$medoids #pusat K-medoids
pusat_kmedoids <- setNames(pusat_kmedoids, c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y"))
pusat_kmedoids
pusat_kmedoids=k_medoids$medoids
DATA_TA$cluster_kmedoids<-k_medoids$clustering
str(DATA_TA)
#eksplor ke excel
write_xlsx(DATA_TA, path="DATA_klaster.xlsx")
#Menentukan Pusat Klaster Awal
DATA_TA_A=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y")]
DATA_TA_A_5=filter(DATA_TA_A, Y==5)
DATA_TA_A_5=DATA_TA_A_5[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
DATA_TA_A_4=filter(DATA_TA_A, Y==4)
DATA_TA_A_4=DATA_TA_A_4[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
DATA_TA_A_3=filter(DATA_TA_A, Y==3)
DATA_TA_A_3=DATA_TA_A_3[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
DATA_TA_A_2=filter(DATA_TA_A, Y==2)
DATA_TA_A_2=DATA_TA_A_2[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
DATA_TA_A_1=filter(DATA_TA_A, Y==1)
DATA_TA_A_1=DATA_TA_A_1[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
#fungsi untuk mencari modus
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
#Menentukan Pusat Klaster Awal dengan Modus
P_K1_A1=apply(DATA_TA_A_1, 2, find_mode) #pusat klaster 1 kategori awal untuk modus
P_K1_A1
P_K2_A1=apply(DATA_TA_A_2, 2, find_mode)
P_K2_A1
P_K3_A1=apply(DATA_TA_A_3, 2, find_mode)
P_K3_A1
P_K4_A1=apply(DATA_TA_A_4, 2, find_mode)
P_K4_A1
P_K5_A1=apply(DATA_TA_A_5, 2, find_mode)
P_K5_A1
#Menentukan Pusat Klaster Awal dengan Median
P_K1_A2=apply(DATA_TA_A_1, 2, median) #pusat klaster 1 kategori awal untuk median
P_K1_A2
P_K2_A2=apply(DATA_TA_A_2, 2, median)
P_K2_A2
P_K3_A2=apply(DATA_TA_A_3, 2, median)
P_K3_A2
P_K4_A2=apply(DATA_TA_A_4, 2, median)
P_K4_A2
P_K5_A2=apply(DATA_TA_A_5, 2, median)
P_K5_A2
# pelabelan klaster Kmodes
# M=Y, 4=1, 3=2, 5=3, 1=4, 2=5
#pusat klaster kmodes
P_K1_M1=pusat_kmodes[4,]
P_K1_M1
P_K2_M1=pusat_kmodes[3,]
P_K2_M1
P_K3_M1=pusat_kmodes[5,]
P_K3_M1
P_K4_M1=pusat_kmodes[1,]
P_K4_M1
P_K5_M1=pusat_kmodes[2,]
P_K5_M1
#pusat klaster kmedoids
P_K1_M2=pusat_kmedoids[5,]
P_K1_M2
P_K2_M2=pusat_kmedoids[4,]
P_K2_M2
P_K3_M2=pusat_kmedoids[3,]
P_K3_M2
P_K4_M2=pusat_kmedoids[2,]
P_K4_M2
P_K5_M2=pusat_kmedoids[1,]
P_K5_M2
# mengubah nilai kolom Y, cluster_kmodes dan cluster_kmedoids
# Data Y
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"1" = "Sangat Miskin",
"2" = "Miskin",
"3" = "Hampir Miskin",
"4" = "Cukup Miskin",
"5" = "Tidak Miskin"))
# Data Kmodes
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"4" = "Sangat Miskin",
"3" = "Miskin",
"5" = "Hampir Miskin",
"1" = "Cukup Miskin",
"2" = "Tidak Miskin"))
# Data Kmedoids
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"5" = "Sangat Miskin",
"4" = "Miskin",
"3" = "Hampir Miskin",
"2" = "Cukup Miskin",
"1" = "Tidak Miskin"))
DATA_TA <- DATA_TA %>%
mutate(Y = recode(Y,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmodes = recode(cluster_kmodes,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
DATA_TA <- DATA_TA %>%
mutate(cluster_kmedoids = recode(cluster_kmedoids,
"Sangat Miskin"=1,
"Miskin"=2,
"Hampir Miskin"=3,
"Cukup Miskin"=4,
"Tidak Miskin"=5))
#eksplor ke excel
write_xlsx(DATA_TA, path="DATA_label.xlsx")
#Menjadikan faktor
DATA_TA$Y <- as.factor(DATA_TA$Y)
DATA_TA$cluster_kmodes <- as.factor(DATA_TA$cluster_kmodes)
DATA_TA$cluster_kmedoids <- as.factor(DATA_TA$cluster_kmedoids)
str(DATA_TA)
#Data Kmodes yang klasternya berbeda
DATA_TA_KMODES=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y","cluster_kmodes")]
OUTLIER_KMODES=DATA_TA_KMODES[DATA_TA_KMODES$Y != DATA_TA_KMODES$cluster_kmodes,]
str(OUTLIER_KMODES)
#Data Kmedoids yang klasternya berbeda
DATA_TA_KMEDOIDS=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y","cluster_kmedoids")]
OUTLIER_KMEDOIDS=DATA_TA_KMEDOIDS[DATA_TA_KMEDOIDS$Y != DATA_TA_KMEDOIDS$cluster_kmedoids,]
str(OUTLIER_KMEDOIDS)
write.csv(OUTLIER_KMEDOIDS,"DATA_labelbeda_kmedoids.csv", row.names = TRUE)
write.csv(OUTLIER_KMODES,"DATA_labelbeda_kmodes.csv", row.names = TRUE)
# 1 data untuk tiap metode
DATA_TA_HASIL_MODES=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y","cluster_kmodes")]
DATA_TA_HASIL_MEDOIDS=DATA_TA[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","Y","cluster_kmedoids")]
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
# Fungsi untuk menghitung jarak Hamming
hamming_dist_to_center <- function(observation, center) {
dist <- sum(observation != center)
return(dist)
}
jarak_hamming <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_hamming_awal<-jarak_hamming(DATA_TA_HASIL_MODES,"Y",P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
result_jarak_hamming_awal
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result_jarak_hamming_awal
result_jarak_hamming_modes<-jarak_hamming(DATA_TA_HASIL_MODES,"cluster_kmodes",P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
result_jarak_hamming_modes
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result_jarak_hamming_modes
##
# Fungsi untuk menghitung jarak Manhattan
manhattan_dist_to_center <- function(observation, center) {
dist <- abs(observation - center)
dist <- sum(dist)
return(dist)
}
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,klaster,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11")]
obs <- obs[i, ]
if (data[i, klaster]==1){pusat=pusat1
} else if(data[i, klaster]==2){pusat=pusat2
} else if(data[i, klaster]==3){pusat=pusat3
} else if(data[i, klaster]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result_jarak_manhattan_awal<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"Y",P_K1_A2,P_K2_A2,P_K3_A2,P_K4_A2,P_K5_A2)
result_jarak_manhattan_awal
DATA_TA_HASIL_MEDOIDS$jarak_pusat_awal <- result_jarak_manhattan_awal
result_jarak_manhattan_medoids<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,"cluster_kmedoids",P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
result_jarak_manhattan_medoids
DATA_TA_HASIL_MEDOIDS$jarak_pusat_medoids <- result_jarak_manhattan_medoids
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[ ,"jarak_pusat_modes"] <= DATA_TA_HASIL_MODES[ ,"jarak_pusat_awal"], DATA_TA_HASIL_MODES[ ,"cluster_kmodes"], DATA_TA_HASIL_MODES[ ,"Y"])
MODES_AKHIR
MEDOIDS_AKHIR <-ifelse(DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_medoids"] <= DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_awal"], DATA_TA_HASIL_MEDOIDS[, "cluster_kmedoids"], DATA_TA_HASIL_MEDOIDS[, "Y"])
MEDOIDS_AKHIR
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- MODES_AKHIR
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MODES$KLASTER_AKHIR)
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- as.factor(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR)
str(DATA_TA_HASIL_MODES)
str(DATA_TA_HASIL_MEDOIDS)
#eksplor ke excel
write_xlsx(DATA_TA_HASIL_MODES, path="DATA_TA_HASIL_MODES.xlsx")
write_xlsx(DATA_TA_HASIL_MEDOIDS, path="DATA_TA_HASIL_MEDOIDS.xlsx")
#confusion matrix
table(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
table(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
evaluasi = function(predik,asli){
akurasi=confusionMatrix(data=predik, reference = asli)$overall[1]#akurasi
cat("Akurasi :", akurasi,"\n")
}
evaluasi(DATA_TA_HASIL_MODES$KLASTER_AKHIR,DATA_TA_HASIL_MODES$cluster_kmodes)
evaluasi(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR,DATA_TA_HASIL_MEDOIDS$cluster_kmedoids)
#Data tanpa outlier
KMEDOIDS_CLEAN=DATA_TA_HASIL_MEDOIDS[DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR == DATA_TA_HASIL_MEDOIDS$cluster_kmedoid,]
KMEDOIDS_CLEAN=KMEDOIDS_CLEAN[,c("X1", "X2", "X3","X4","X5","X6","X7","X8","X9","X10","X11","KLASTER_AKHIR")]
str(KMEDOIDS_CLEAN)
# DESICION TREE
#membagi data training dan testing
set.seed(123)
splitdata <- sample.split(KMEDOIDS_CLEAN$KLASTER_AKHIR, SplitRatio = 0.7) # training 70%
data.training <- subset(KMEDOIDS_CLEAN, splitdata==T)
data.testing <- subset(KMEDOIDS_CLEAN, splitdata==F)
#membuat model desicion tree
DETE=rpart(KLASTER_AKHIR~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11, method = "class", data = data.training)
DETE
prediksi_DETE <- predict(DETE, newdata = data.testing, type = "class")
prediksi_DETE
#confusion matrix
confusion_matrix=table(data.testing$KLASTER_AKHIR,prediksi_DETE)
confusion_matrix
# Inisialisasi vektor untuk presisi, recall, dan F1-score
precision <- numeric(nrow(confusion_matrix))
recall <- numeric(nrow(confusion_matrix))
f1_score <- numeric(nrow(confusion_matrix))
# Hitung presisi, recall, dan F1-score untuk setiap kelas
for (i in 1:nrow(confusion_matrix)) {
TP <- confusion_matrix[i, i]
FP <- sum(confusion_matrix[, i]) - TP
FN <- sum(confusion_matrix[i, ]) - TP
TN <- sum(confusion_matrix) - (TP + FP + FN)
precision[i] <- TP / (TP + FP)
recall[i] <- TP / (TP + FN)
f1_score[i] <- 2 * precision[i] * recall[i] / (precision[i] + recall[i])
}
# Tampilkan hasil
results <- data.frame(
Class = 1:nrow(confusion_matrix),
Precision = precision,
Recall = recall,
F1_Score = f1_score
)
print(results)
#confusion matrix
confusion_matrix=table(data.testing$KLASTER_AKHIR,prediksi_DETE)
confusion_matrix
# Inisialisasi vektor untuk presisi, recall, dan F1-score
accuracy <- numeric(nrow(confusion_matrix))
precision <- numeric(nrow(confusion_matrix))
recall <- numeric(nrow(confusion_matrix))
f1_score <- numeric(nrow(confusion_matrix))
# Hitung presisi, recall, dan F1-score untuk setiap kelas
for (i in 1:nrow(confusion_matrix)) {
TP <- confusion_matrix[i, i]
FP <- sum(confusion_matrix[, i]) - TP
FN <- sum(confusion_matrix[i, ]) - TP
TN <- sum(confusion_matrix) - (TP + FP + FN)
accuracy[i] <- (TP+TN)/(TP+TN+FP+FN)
precision[i] <- TP / (TP + FP)
recall[i] <- TP / (TP + FN)
f1_score[i] <- 2 * precision[i] * recall[i] / (precision[i] + recall[i])
}
# Tampilkan hasil
results <- data.frame(
Class = 1:nrow(confusion_matrix),
Accuracy = accuracy,
Precision = precision,
Recall = recall,
F1_Score = f1_score
)
print(results)
