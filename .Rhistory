DATA_beda_MEDOIDS_Y1_M2[1]
DATA_beda_MEDOIDS_Y1_M2
# Y=1 dan K2=2
DATA_beda_MEDOIDS_Y1_M2=filter(DATA_beda_MEDOIDS_Y1,cluster_kmedoids==2)
#Kmedoids
OUTLIER_KMEDOIDS
# Y = 1
DATA_beda_MEDOIDS_Y1=filter(OUTLIER_KMEDOIDS, Y==1)
# Y = 1
DATA_beda_MEDOIDS_Y1=filter(OUTLIER_KMEDOIDS, Y==1)
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
# Y = 1
DATA_beda_MEDOIDS_Y1=filter(OUTLIER_KMEDOIDS, Y==1)
# Y=1 dan K2=2
DATA_beda_MEDOIDS_Y1_M2=filter(DATA_beda_MEDOIDS_Y1,cluster_kmedoids==2)
result <- jarak_manhattan(DATA_beda_MEDOIDS_Y1_M2,P_K1_A2)
DATA_beda_MEDOIDS_Y1_M2$jarak_pusat_awal <- result
result <- jarak_manhattan(DATA_beda_MEDOIDS_Y1_M2,P_K2_M2)
DATA_beda_MEDOIDS_Y1_M2$jarak_pusat_medoids <- result
DATA_beda_MEDOIDS_Y1_M2
skor=50
if (skor>= 80){
return("A")
} else if (skor>=70){
print("B")
} else {print("C")}
if (skor>= 80){
return("A")
} else if (skor>=70){
return("B")
} else {return("C")}
klaster_akhir <- function(data){
m
}
klaster_akhir <- function(data){
}
klaster_akhir <- function(data){
akhir <- sapply(1:nrow(data), function(i){
if (data[15]>=data[14]){
print(1)
} else {print(2)}
}
}
akhir <- sapply(1:nrow(data), function(i){
]
data = DATA_beda_MEDOIDS_Y1_M2
if (data[15]>=data[14]){
print(1)
} else {print(2)}
if (data[15]>=data[14]){
print("1")
} else {print("2")}
data[15]
data[15]>=data[14]
DATA_beda_MEDOIDS_Y1_M2
klaster_akhir <- function(data){
if (data[15]>=data[14]){
print("1")
} else {print("2")}
}
klaster_akhir(data)
klaster_akhir <- function(data){
akhir <- data[15]>=data[14]
if (akhir==T){
print("1")
}else {print("2")}
}
klaster_akhir(data)
klaster_akhir <- function(data){
akhir <- data[15]>=data[14]
if (akhir==T){
print("1")
}else if (akhir==F) {
print("2")}
}
klaster_akhir(data)
klaster_akhir <- function(data) {
akhir <- data[15] >= data[14]
if (all(akhir)) {
print("1")
} else if (all(!akhir)) {
print("2")
} else {
print("Error: akhir contains both TRUE and FALSE values")
}
}
klaster_akhir(data)
akhir <- data[15] >= data[14]
akhir
DATA_beda_MEDOIDS_Y1_M2
result <- ifelse(data[, "jarak_pusat_medoids"] >= dataset[, "jarak_pusat_awal"], "1", "2")
result <- ifelse(data[, "jarak_pusat_medoids"] >= data[, "jarak_pusat_awal"], "1", "2")
print(result)
result <- ifelse(data[, "jarak_pusat_medoids"] >= data[, "jarak_pusat_awal"], data[, "Y"], data[, "cluster_kmedoids"])
print(result)
if skor>= 80{
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[, "Y"]=1){pusat=P_K1_M2
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[, "Y"]==1){pusat=P_K1_M2
} else if(data[, "Y"]==2){pusat=P_K2_M2
} else if(data[, "Y"]==3){pusat=P_K3_M2
} else if(data[, "Y"]==4){pusat=P_K4_M2
} else {pusat=P_K5_M2}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
#Kmedoids
OUTLIER_KMEDOIDS
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[, "Y"]==1){pusat=pusat1
} else if(data[, "Y"]==2){pusat=pusat2
} else if(data[, "Y"]==3){pusat=pusat3
} else if(data[, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_manhattan(OUTLIER_KMEDOIDS,P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
OUTLIER_KMEDOIDS[,"Y"]==1
result<-jarak_manhattan(OUTLIER_KMEDOIDS,P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[, "Y"]==1){pusat=pusat1
} else if(data[, "Y"]==2){pusat=pusat2
} else if(data[, "Y"]==3){pusat=pusat3
} else if(data[, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_manhattan(OUTLIER_KMEDOIDS,P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, "Y"]==1){pusat=pusat1
} else if(data[i, "Y"]==2){pusat=pusat2
} else if(data[i, "Y"]==3){pusat=pusat3
} else if(data[i, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_manhattan(OUTLIER_KMEDOIDS,P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
OUTLIER_KMEDOIDS$jarak_pusat_medoids <- result
OUTLIER_KMEDOIDS
rm(data)
result<-jarak_manhattan(OUTLIER_KMEDOIDS,P_K1_A2,P_K2_A2,P_K3_A2,P_K4_A2,P_K5_A2)
OUTLIER_KMEDOIDS$jarak_pusat_awal <- result
OUTLIER_KMEDOIDS
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
jarak_hamming() <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, "Y"]==1){pusat=pusat1
} else if(data[i, "Y"]==2){pusat=pusat2
} else if(data[i, "Y"]==3){pusat=pusat3
} else if(data[i, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
jarak_hamming <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, "Y"]==1){pusat=pusat1
} else if(data[i, "Y"]==2){pusat=pusat2
} else if(data[i, "Y"]==3){pusat=pusat3
} else if(data[i, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_hamming(OUTLIER_KMODES,P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
OUTLIER_KMODES$jarak_pusat_modes <- result
result<-jarak_manhattan(OUTLIER_KMEDOIDS,P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
OUTLIER_KMODES$jarak_pusat_awal <- result
result<-jarak_manhattan(OUTLIER_KMODES,P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
result<-jarak_hamming(OUTLIER_KMODES,P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
OUTLIER_KMODES$jarak_pusat_awal <- result
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(OUTLIER_KMODES[, "jarak_pusat_modes"] >= OUTLIER_KMODES[, "jarak_pusat_awal"], OUTLIER_KMODES[, "Y"], OUTLIER_KMODES[, "cluster_kmodes"])
MEDOIDS_AKHIR <-ifelse(OUTLIER_KMEDOIDS[, "jarak_pusat_medoids"] >= OUTLIER_KMEDOIDS[, "jarak_pusat_awal"], OUTLIER_KMEDOIDS[, "Y"], OUTLIER_KMEDOIDS[, "cluster_kmedoids"])
MODES_AKHIR
OUTLIER_KMODES$KLASTER_AKHIR <- MODES_AKHIR
OUTLIER_KMEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
OUTLIER_KMODES
OUTLIER_KMEDOIDS
DATA_TA_1
DATA_TA_1
DATA_TA
DATA_TA_HASIL=DATA_TA
DATA_TA
DATA_TA_HASIL
DATA_TA_HASIL_MODES=DATA_TA
DATA_TA_HASIL_MEDOIDS=DATA_TA
##
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
jarak_hamming <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, "Y"]==1){pusat=pusat1
} else if(data[i, "Y"]==2){pusat=pusat2
} else if(data[i, "Y"]==3){pusat=pusat3
} else if(data[i, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_hamming(DATA_TA_HASIL_MODES,P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result
result<-jarak_hamming(DATA_TA_HASIL_MODES,P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result
##
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, "Y"]==1){pusat=pusat1
} else if(data[i, "Y"]==2){pusat=pusat2
} else if(data[i, "Y"]==3){pusat=pusat3
} else if(data[i, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
DATA_TA_HASIL_MEDOIDS$jarak_pusat_medoids <- result
result<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,P_K1_A2,P_K2_A2,P_K3_A2,P_K4_A2,P_K5_A2)
DATA_TA_HASIL_MEDOIDS$jarak_pusat_awal <- result
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[, "jarak_pusat_modes"] >= OUTLIER_KMODES[, "jarak_pusat_awal"], OUTLIER_KMODES[, "Y"], OUTLIER_KMODES[, "cluster_kmodes"])
MEDOIDS_AKHIR <-ifelse(DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_medoids"] >= OUTLIER_KMEDOIDS[, "jarak_pusat_awal"], OUTLIER_KMEDOIDS[, "Y"], OUTLIER_KMEDOIDS[, "cluster_kmedoids"])
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- MODES_AKHIR
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
DATA_TA_HASIL_MODES
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[, "jarak_pusat_modes"] >= DATA_TA_HASIL_MODES[, "jarak_pusat_awal"], DATA_TA_HASIL_MODES[, "Y"], DATA_TA_HASIL_MODES[, "cluster_kmodes"])
MEDOIDS_AKHIR <-ifelse(DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_medoids"] >= DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_awal"], DATA_TA_HASIL_MEDOIDS[, "Y"], DATA_TA_HASIL_MEDOIDS[, "cluster_kmedoids"])
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- MODES_AKHIR
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
DATA_TA_HASIL_MODES
DATA_TA_HASIL_MEDOIDS
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
# DESICION TREE
#membagi data training dan testing
set.seed(101)
splitdata <- sample.split(DATA_TA_KMODES$Y, SplitRatio = 0.7) # training 70%
data.training <- subset(DATA_TA_KMODES, splitdata==T)
data.testing <- subset(DATA_TA_KMODES, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
DATA_TA_HASIL_MODES
# DESICION TREE
#membagi data training dan testing
set.seed(101)
splitdata <- sample.split(DATA_TA_HASIL_MODES$KLASTER_AKHIR, SplitRatio = 0.7) # training 70%
data.training <- subset(DATA_TA_HASIL_MODES, splitdata==T)
data.testing <- subset(DATA_TA_HASIL_MODES, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
#membuat model desicion tree
#variabel Y
DT_AKHIR_MODES=rpart(KLASTER_AKHIR~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_Y)
#visualisasi
prp(DT_AKHIR_MODES)
#visualisasi
prp(DT_AKHIR_MODES)
#Prdiksi
prediksi_KMODES_KLASTER_AKHIR <- predict(DT_AKHIR_MODES, newdata = data.testing, type = "class")
#confusion matrix
table(prediksi_KMODES_KLASTER_AKHIR,data.testing$KLASTER_AKHIR)
#Prdiksi
prediksi_KMODES_KLASTER_AKHIR <- predict(DT_AKHIR_MODES, newdata = data.testing, type = "class")
#confusion matrix
table(prediksi_KMODES_KLASTER_AKHIR,data.testing$KLASTER_AKHIR)
#melihat dimensi data
dim(data.training)
dim(data.testing)
data.testing
data.training
akurasi_KLASTER_AKHIR=confusionMatrix(data=prediksi_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$overall[1]#akurasi
akurasi_KLASTER_AKHIR=confusionMatrix(data=prediksi_KMODES_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$overall[1]#akurasi
data.training
akurasi_KLASTER_AKHIR=confusionMatrix(data=prediksi_KMODES_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$overall[1]#akurasi
prediksi_KMODES_KLASTER_AKHIR
splitdata <- sample.split(DATA_TA_HASIL_MODES$KLASTER_AKHIR, SplitRatio = 0.75) # training 70%
data.training <- subset(DATA_TA_HASIL_MODES, splitdata==T)
data.testing <- subset(DATA_TA_HASIL_MODES, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
data.training
#membuat model desicion tree
#variabel Y
DT_AKHIR_MODES=rpart(KLASTER_AKHIR~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_Y)
#visualisasi
prp(DT_AKHIR_MODES)
#Prdiksi
prediksi_KMODES_KLASTER_AKHIR <- predict(DT_AKHIR_MODES, newdata = data.testing, type = "class")
prediksi_KMODES_KLASTER_AKHIR
#confusion matrix
table(prediksi_KMODES_KLASTER_AKHIR,data.testing$KLASTER_AKHIR)
akurasi_KLASTER_AKHIR=confusionMatrix(data=prediksi_KMODES_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$overall[1]#akurasi
str(prediksi_KMODES_KLASTER_AKHIR)
summary(prediksi_KMODES_KLASTER_AKHIR)
#confusion matrix
table(prediksi_Y,data.testing$Y)
# DESICION TREE
#membagi data training dan testing
set.seed(101)
splitdata <- sample.split(DATA_TA$Y, SplitRatio = 0.7) # training 70%
data.training <- subset(DATA_TA, splitdata==T)
data.testing <- subset(DATA_TA, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
#membuat model desicion tree
#variabel Y
DT_Y=rpart(Y~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_Y)
#variabel kmodes
DT_kmodes=rpart(cluster_kmodes~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_kmodes)
#variabel kmedoids
DT_kmedoids=rpart(cluster_kmedoids~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
printcp(DT_kmedoids)
#visualisasi
prp(DT_Y)
prp(DT_kmodes)
#Prdiksi
prediksi_Y <- predict(DT_Y, newdata = data.testing, type = "class")
prediksi_kmodes <- predict(DT_kmodes, newdata = data.testing, type = "class")
prediksi_kmedoids <- predict(DT_kmedoids, newdata = data.testing, type = "class")
#confusion matrix
table(prediksi_Y,data.testing$Y)
table(prediksi_kmodes,data.testing$cluster_kmodes)
table(prediksi_kmedoids,data.testing$cluster_kmedoids)
#membagi data training dan testing
set.seed(101)
splitdata <- sample.split(DATA_TA_HASIL_MODES$KLASTER_AKHIR, SplitRatio = 0.75) # training 70%
data.training <- subset(DATA_TA_HASIL_MODES, splitdata==T)
data.testing <- subset(DATA_TA_HASIL_MODES, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
data.training
#membuat model desicion tree
#variabel Y
DT_AKHIR_MODES=rpart(KLASTER_AKHIR~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
#Prdiksi
prediksi_KMODES_KLASTER_AKHIR <- predict(DT_AKHIR_MODES, newdata = data.testing, type = "class")
summary(prediksi_KMODES_KLASTER_AKHIR)
#confusion matrix
table(prediksi_KMODES_KLASTER_AKHIR,data.testing$KLASTER_AKHIR)
akurasi_KLASTER_AKHIR=confusionMatrix(data=prediksi_KMODES_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$overall[1]#akurasi
presisi_KLASTER_AKHIR=confusionMatrix(data=prediksi_KMODES_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$byClass[1]#presisi
recal_KLASTER_AKHIR=confusionMatrix(data=prediksi_KMODES_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$byClass[2]#recal
F1_KLASTER_AKHIR = 2 * (presisi_KLASTER_AKHIR * recal_KLASTER_AKHIR) / (presisi_KLASTER_AKHIR+ recal_KLASTER_AKHIR) #F1
akurasi_KLASTER_AKHIR
presisi_KLASTER_AKHIR
recal_KLASTER_AKHIR
F1_KLASTER_AKHIR
splitdata <- sample.split(DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR, SplitRatio = 0.75) # training 70%
data.training <- subset(DATA_TA_HASIL_MEDOIDS, splitdata==T)
data.testing <- subset(DATA_TA_HASIL_MEDOIDS, splitdata==F)
#melihat dimensi data
dim(data.training)
dim(data.testing)
#membuat model desicion tree
#variabel Y
DT_AKHIR_MODES=rpart(KLASTER_AKHIR~X1+X15+X10+X13+X4+X14+X19+X11+X16+X5+X26, method = "class", data = data.training)
#Prdiksi
prediksi_KMODES_KLASTER_AKHIR <- predict(DT_AKHIR_MODES, newdata = data.testing, type = "class")
summary(prediksi_KMODES_KLASTER_AKHIR)
#confusion matrix
table(prediksi_KMODES_KLASTER_AKHIR,data.testing$KLASTER_AKHIR)
akurasi_KLASTER_AKHIR=confusionMatrix(data=prediksi_KMODES_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$overall[1]#akurasi
presisi_KLASTER_AKHIR=confusionMatrix(data=prediksi_KMODES_KLASTER_AKHIR, reference = data.testing$KLASTER_AKHIR)$byClass[1]#presisi
#Load library
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
DATA_TA_HASIL_MODES
DATA_TA_HASIL_MODES=DATA_TA
DATA_TA_HASIL_MEDOIDS=DATA_TA
# Hitung jarak Hamming dari setiap observasi ke pusat klaster
jarak_hamming <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, "Y"]==1){pusat=pusat1
} else if(data[i, "Y"]==2){pusat=pusat2
} else if(data[i, "Y"]==3){pusat=pusat3
} else if(data[i, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
hamming_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_hamming(DATA_TA_HASIL_MODES,P_K1_A1,P_K2_A1,P_K3_A1,P_K4_A1,P_K5_A1)
DATA_TA_HASIL_MODES$jarak_pusat_awal <- result
result<-jarak_hamming(DATA_TA_HASIL_MODES,P_K1_M1,P_K2_M1,P_K3_M1,P_K4_M1,P_K5_M1)
DATA_TA_HASIL_MODES$jarak_pusat_modes <- result
##
# Hitung jarak Manhattan dari setiap observasi ke pusat klaster
jarak_manhattan <- function(data,pusat1,pusat2,pusat3,pusat4,pusat5) {
distances <- sapply(1:nrow(data), function(i) {
obs <- data[,c("X1","X15","X10","X13","X4","X14","X19","X11","X16","X5","X26")]
obs <- obs[i, ]
if (data[i, "Y"]==1){pusat=pusat1
} else if(data[i, "Y"]==2){pusat=pusat2
} else if(data[i, "Y"]==3){pusat=pusat3
} else if(data[i, "Y"]==4){pusat=pusat4
} else {pusat=pusat5}
manhattan_dist_to_center(obs, pusat)
})
return(distances)
}
result<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,P_K1_A2,P_K2_A2,P_K3_A2,P_K4_A2,P_K5_A2)
DATA_TA_HASIL_MEDOIDS$jarak_pusat_awal <- result
result<-jarak_manhattan(DATA_TA_HASIL_MEDOIDS,P_K1_M2,P_K2_M2,P_K3_M2,P_K4_M2,P_K5_M2)
DATA_TA_HASIL_MEDOIDS$jarak_pusat_medoids <- result
### Mendapatkan klaster akhir dengan jarak terdekat
MODES_AKHIR <- ifelse(DATA_TA_HASIL_MODES[, "jarak_pusat_modes"] >= DATA_TA_HASIL_MODES[, "jarak_pusat_awal"], DATA_TA_HASIL_MODES[, "Y"], DATA_TA_HASIL_MODES[, "cluster_kmodes"])
MEDOIDS_AKHIR <-ifelse(DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_medoids"] >= DATA_TA_HASIL_MEDOIDS[, "jarak_pusat_awal"], DATA_TA_HASIL_MEDOIDS[, "Y"], DATA_TA_HASIL_MEDOIDS[, "cluster_kmedoids"])
DATA_TA_HASIL_MODES$KLASTER_AKHIR <- MODES_AKHIR
DATA_TA_HASIL_MEDOIDS$KLASTER_AKHIR <- MEDOIDS_AKHIR
DATA_TA_HASIL_MODES
DATA_TA_HASIL_MEDOIDS
#eksplor ke excel
write_xlsx(DATA_TA_HASIL_MODES, path="DATA_TA_HASIL_MODES.xlsx")
write_xlsx(DATA_TA_HASIL_MEDOIDS, path="DATA_TA_HASIL_MEDOIDS.xlsx")
DATA_TA_HASIL_MODES
library(readxl) # membaca data excel
library(factoextra) # untuk kmedoids
library(cluster) # untuk kmedoids
library(klaR) # untuk kmodes
library(writexl) # untuk mengunduh data ke local
library(dplyr) # memudahkan function
library(caret) # # untuk confusion matrix
library(rpart) #untuk desicion tree
library(caTools) # untuk membagi data train dan test
library(rpart.plot) #visualisai
DATA_TA
str(DATA_TA)
describe(DATA_TA)
table(DATA_TA)
table(DATA_TA$cluster_kmodes)
